// Nez Celery Grammar
// Author Shinya Yamaguchi

/*////////////////////////////////////////////////
//////////////////// Toplevel ////////////////////
////////////////////////////////////////////////*/

File
	= _ Root _

Root 
	= { $(StructDeclaration)+ #Root }

/*////////////////////////////////////////////////
////////////////// Declaration ///////////////////
////////////////////////////////////////////////*/

StructDeclaration
	= { $(StructModifiers)? "struct" $Name(Name) "=" $(StructMembers)+ #Struct} _

StructMembers
	= TypedParameter / UntypedParameter 

StructModifiers
	= {$(StructModifier) $(StructModifier)* #Modifiers}

StructModifier
	= { "ordered" #Ordered} _
	
TypedParameter
	=  { $Name(Name) qualifier ":" $Type(TypeDeclaration RangeDeclaration? ) _ $Value(DefaultValue)? } _ 

qualifier
	= '?' #Option
	/ ''  #Required

UntypedParameter 
	= { $Name(Name) untypedqualifier _ $Value(DefaultValue) } _ 

untypedqualifier
	= '?' #UntypedOption
	/ ''  #UntypedRequired
	
TypeDeclaration
	= ArrayType
	/ PrimaryType
	/ EnumType
	/ ClassType
	
ArrayType
	= { ($(PrimaryType) / $(ClassType)) "[" $Size(ArraySize)? "]" #TArray }

ArraySize
	= { DECIMAL #ArraySize } _

PrimaryType
	= "boolean"{       #TBoolean}
	/ "int"    {       #TInteger} 
	/ "float"  {       #TFloat}
	/ "string" {       #TString}
	/ "any"    {       #TAny}
	/ "object" {       #TObject}

ClassType 
	= { NAMETOKEN #TStruct } _

RangeDeclaration
	= {$ "(" $Min(Range) ".." $Max(Range) ")" #RangedType }
	
Range
	= { DECIMAL #Range } _
	
DefaultValue 
	= { "=" ($(Literal) / $(FieldReference)) (_ "," ($(Literal) / $(FieldReference)) )* #DefaultValue}

EnumType
	= { "enum" "{" $(EnumValue) _ ("," $(EnumValue) _ )* "}" #TEnum }

FieldReference 
	= { $(Name) '.' $(Name) #FieldReference }

Literal 
	= Float
	/ Integer
	/ Boolean
	/ String

EnumValue
	=  {'"' STRING_CONTENT* '"' #EnumValue } 

example StructMembers '''
age:int(0..100)
'''


/*////////////////////////////////////////////////
//////////////////// Literal /////////////////////
////////////////////////////////////////////////*/

Float 
	= { FLOAT #Float } FLOAT_SUFFIX?
	/ { DECIMAL #Float } FLOAT_SUFFIX

FLOAT
	= FRACTION EXPONENT?
	/ DIGIT+ EXPONENT

FRACTION
	= !'_' ('_'* DIGIT)* '.' DIGIT ('_'* DIGIT)*
	/ DIGIT ('_'* DIGIT)* '.'

EXPONENT
	= [eE] [+\-]? DIGIT ('_'* DIGIT)*

FLOAT_SUFFIX
	= [fFdD]

Integer
	= { ( DECIMAL / HEXADECIMAL / BINARY / OCTAL ) #Integer } INT_SUFFIX?

DECIMAL
	= '0' ![bBxX0-9_]
	/ [1-9] ('_'* DIGIT)*

HEXADECIMAL
	= '0' [xX] HEX ('_'* HEX)*

BINARY
	= '0' [bB] [01] ('_'* [01])*

OCTAL
	= '0' ('_'* [0-7])*

INT_SUFFIX
	= [lL]

Boolean
	= { 'true' _  #True }
	/ { 'false' _ #False }

String
	= '"' { STRING_CONTENT* #String } '"'

STRING_CONTENT
	= ESCAPE
	/ ![\"\n\\] .
	
ESCAPE
	= SIMPLE_ESCAPE
	/ OCTAL_ESCAPE
	/ HEX_ESCAPE

SIMPLE_ESCAPE
	= '\\' ['\"\\bfnrt]

OCTAL_ESCAPE
	= '\\' [0-3] [0-7] [0-7]
	/ '\\' [0-7] [0-7]
	/ '\\' [0-7]

HEX_ESCAPE
	= '\\' 'u'+ HEX4
	
Name
	= { !KEYWORD NAMETOKEN #Name } _

NAMETOKEN
	= [A-Za-z] ( '-' / [A-Za-z0-9_])*
	
DIGIT
	= [0-9]

HEX
	= [a-fA-F0-9]

HEX4
	= HEX HEX HEX HEX

W
	= [a-zA-Z0-9_$]

KEYWORD
	= 'struct'
	/ 'enum'
	/ 'ordered'
	

/*////////////////////////////////////////////////
//////////////////// Keyword /////////////////////
////////////////////////////////////////////////*/

"boolean" = 'boolean' !W _
"int"     = 'int' !W _
"float"   = 'float' !W _
"string"  = 'string' !W _
"any"     = 'any' !W _
"enum"    = 'enum' !W _
"struct"  = 'struct' !W _
"ordered" = 'ordered' !W _
"{"       = '{' _
"}"       = '}' _
"["       = '[' _
"]"       = ']' _
"("       = '(' _
")"       = ')' _
","       = ',' _
":"       = ':' _
"="       = '=' _
".."      = '..' _


/*////////////////////////////////////////////////
//////////////////// Layout //////////////////////
////////////////////////////////////////////////*/
_
	= (S / BLOCKCOMMENT / LINECOMMENT )*

S
	= [ \n\r\t\u000B\u000C]

BLOCKCOMMENT
	= '/*' (!'*/' .)* '*/'

LINECOMMENT
	= '//' (!'\n' .)*
	
	